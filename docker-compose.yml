services:
  db:
    container_name: db
    image: postgres:12.12
    environment:
      POSTGRES_DB: root
      POSTGRES_USER: root
      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /var/lib/postgresql/data/
    # volumes:
    #   - ./pgdata/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -U root -d root" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  api:
    container_name: api
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      BUILD_ENV: prod
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/app:/code/app
    ports:
      - "8080:8080"
    stdin_open: true
    tty: true
    networks:
      - my_network

  front:
    container_name: front
    image: node:22.5.1
    working_dir: /app
    volumes:
      - ./frontend:/app
      - front_build_files:/app/dist
    command: ["sh", "-c", "npm install && npm run build"]

  nginx:
    container_name: nginx
    image: nginx:latest
    working_dir: /opt/nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - front_build_files:/opt/nginx/www:ro
    depends_on:
      # api:
        # condition: service_started
      front:
        condition: service_completed_successfully
    restart: always
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  front_build_files: